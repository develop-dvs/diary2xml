package xml2cms;

import diary2xml.Diary2xml;
import static diary2xml.Diary2xml.SAVE_DIR;
import diary2xml.DiaryComment;
import diary2xml.DiaryPost;
import diary2xml.DiaryTag;
import utils.Log;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.SortedSet;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.function.Consumer;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import utils.XML;

/**
 *
 * @author dcrm
 */
public class WP extends acms {

    public static final String xmlInfo = "<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->\n"
            + "<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->\n"
            + "<!-- You may use this file to transfer that content from one site to another. -->\n"
            + "<!-- This file is not intended to serve as a complete backup of your site. -->\n"
            + "\n"
            + "<!-- To import this information into a WordPress site follow these steps: -->\n"
            + "<!-- 1. Log in to that site as an administrator. -->\n"
            + "<!-- 2. Go to Tools: Import in the WordPress admin panel. -->\n"
            + "<!-- 3. Install the \"WordPress\" importer from the list. -->\n"
            + "<!-- 4. Activate & Run Importer. -->\n"
            + "<!-- 5. Upload this file using the form provided on that page. -->\n"
            + "<!-- 6. You will first be asked to map the authors in this export file to users -->\n"
            + "<!--    on the site. For each author, you may choose to map to an -->\n"
            + "<!--    existing user on the site or to create a new user. -->\n"
            + "<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->\n"
            + "<!--    contained in this file into your site. -->\n"
            + "\n"
            + "<!-- generator=\"WordPress/4.9.5\" created=\"2018-05-05 14:35\" -->";

    @Override
    protected void save() {
        this.saveXml(XML.loadXml());
    }
    private Document docWork;
    private Element itemWork;
    private int commentIdCounter;
    
    private HashSet<String> cdataKeys = new HashSet<>();

    void setDocElemWork(Document docWork, Element itemWork) {
        this.docWork = docWork;
        this.itemWork = itemWork;
    }

    void add2tree(String elementName, String elementValue) {
        Element title = this.docWork.createElement(elementName);
        title.setTextContent(elementValue);
        this.itemWork.appendChild(title);
    }
    
    void addCDATA2tree(String elementName, String elementValue) {
        Element title = this.docWork.createElement(elementName);
        title.appendChild(docWork.createCDATASection(elementValue));
        this.itemWork.appendChild(title);
        this.cdataKeys.add(elementName+"");
    }

    public static Date convertToGmt(Date date) {
        TimeZone tz = TimeZone.getDefault();
        Date ret = new Date(date.getTime() - tz.getRawOffset());

        // if we are now in DST, back off by the delta.  Note that we are checking the GMT date, this is the KEY.
        if (tz.inDaylightTime(ret)) {
            Date dstDate = new Date(ret.getTime() - tz.getDSTSavings());

            // check to make sure we have not crossed back into standard time
            // this happens when we are on the cusp of DST (7pm the day before the change for PDT)
            if (tz.inDaylightTime(dstDate)) {
                ret = dstDate;
            }
        }
        return ret;
    }

    void saveXml(HashMap<String, DiaryPost> postsMap) {
        commentIdCounter = 2000;
        try {
            SortedSet<DiaryPost> posts = new TreeSet<>();
            posts.addAll(postsMap.values());
            
            cdataKeys = new HashSet<>();
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

            // root elements
            Document doc = docBuilder.newDocument();
            
            /*Comment systeminfo = doc.createComment(xmlInfo);
            doc.appendChild(systeminfo);*/
            
            Element rssElement = doc.createElement("rss");
            rssElement.setAttribute("version", "2.0");
            rssElement.setAttribute("xmlns:excerpt", "http://wordpress.org/export/1.2/excerpt/");
            rssElement.setAttribute("xmlns:content", "http://purl.org/rss/1.0/modules/content/");
            rssElement.setAttribute("xmlns:wfw", "http://wellformedweb.org/CommentAPI/");
            rssElement.setAttribute("xmlns:dc", "http://purl.org/dc/elements/1.1/");
            rssElement.setAttribute("xmlns:wp", "http://wordpress.org/export/1.2/");
            doc.appendChild(rssElement);
            

            
            Element rootElement = doc.createElement("channel");
            rssElement.appendChild(rootElement);
            
            this.setDocElemWork(doc, rootElement);
            this.add2tree("title", "Import from Diary.ru");
            this.add2tree("wp:wxr_version", "1.2");
            this.add2tree("generator", "https://wordpress.org/?v=4.9.5");
            
            for (DiaryPost dPost : posts) {
                
                /*Element title = doc.createElement("title");
                title.setNodeValue("Import from Diary.ru");
                rootElement.appendChild(title);*/
                
                Element item = doc.createElement("item");
                rootElement.appendChild(item);
                this.setDocElemWork(doc, item);
                this.add2tree("title", dPost.title.replaceAll("\\<.*?>",""));
                this.add2tree("link", "/"+dPost.code+"/");
                Date pubDate = new Date(Long.parseLong(dPost.timestamp));
                SimpleDateFormat format = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss +0000", Locale.ENGLISH); //Thu, 23 Nov 2017 19:24:26 +0000
                this.add2tree("pubDate", format.format(convertToGmt(pubDate)));
                this.add2tree("description", "");
                this.addCDATA2tree("content:encoded", dPost.preview.equals(dPost.detail) ? dPost.preview : dPost.preview + "<!--more-->" + dPost.detail);
                //this.add2tree("excerpt:encoded", cdata(""));
                SimpleDateFormat formatMini = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.ENGLISH);
                this.addCDATA2tree("wp:post_date", formatMini.format(pubDate));
                this.addCDATA2tree("wp:post_date_gmt", formatMini.format(convertToGmt(pubDate)));
                this.addCDATA2tree("wp:comment_status", "open");
                this.addCDATA2tree("wp:ping_status", "closed");
                this.addCDATA2tree("wp:post_name", dPost.code);
                this.addCDATA2tree("wp:status", (dPost.hide) ? "draft" : "publish");
                this.add2tree("wp:post_parent", "0");
                this.add2tree("wp:menu_order", "0");
                this.addCDATA2tree("wp:post_type", "post");
                this.addCDATA2tree("wp:post_password", "");
                this.add2tree("wp:menu_order", "0");
                this.add2tree("wp:is_sticky", "0");
                
                Element category = doc.createElement("category");
                category.setAttribute("domain", "category");
                category.setAttribute("nicename", "archive"); // Рубрика
                category.appendChild(doc.createCDATASection("Архив"));
                cdataKeys.add("category");
                item.appendChild(category);
                
                for (DiaryTag eTag : dPost.tags) {
                    Element tag = doc.createElement("category");
                    tag.setAttribute("domain", "post_tag");
                    tag.setAttribute("nicename", eTag.name);
                    tag.appendChild(doc.createCDATASection(eTag.name));
                    item.appendChild(tag);
                }
                
                for (DiaryComment eComment : dPost.comments) {
                    Element comment = doc.createElement("wp:comment");
                    this.setDocElemWork(doc, comment);
                    this.addCDATA2tree("wp:comment_id", Integer.toString(commentIdCounter++));
                    
                    this.addCDATA2tree("wp:comment_author", eComment.authorName);
                    
                    if (eComment.authorName.equals("Птица")) {
                        this.addCDATA2tree("wp:comment_author_email", "info@bird.spb.ru");
                        this.add2tree("wp:comment_user_id", "1");
                        // //info@bird.spb.ru
                    } else {
                        this.addCDATA2tree("wp:comment_author_email", "");
                        this.add2tree("wp:comment_user_id", "0");
                    }
                    this.addCDATA2tree("wp:comment_author_email", "");
                    this.addCDATA2tree("wp:comment_author_url", ""); //eComment.authorHref
                    this.addCDATA2tree("wp:comment_author_IP", "127.0.0.1");
                    Date commentDate = new Date(Long.parseLong(eComment.timestamp));
                    this.addCDATA2tree("wp:comment_date", formatMini.format(commentDate));
                    this.addCDATA2tree("wp:comment_date_gmt", formatMini.format(convertToGmt(commentDate)));
                    this.addCDATA2tree("wp:comment_content", eComment.text);
                    this.addCDATA2tree("wp:comment_approved", "1");
                    this.addCDATA2tree("wp:comment_type", "");
                    this.add2tree("wp:comment_parent", "0");
                    
                    item.appendChild(comment);
                }
            }

            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            
            transformer.setOutputProperty(OutputKeys.METHOD, "xml");
            transformer.setOutputProperty(OutputKeys.CDATA_SECTION_ELEMENTS, String.join(" ", cdataKeys));
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");

            DOMSource source = new DOMSource(doc);

            String curXmlFilePath = Diary2xml.CMS_DIR + "wp.xml";
            File fileXml = new File(curXmlFilePath);
            fileXml.createNewFile();

            StreamResult result = new StreamResult(fileXml);
            transformer.transform(source, result);

            Log.msg("Save XML [" + curXmlFilePath + "]");

        } catch (Exception ex) {
            ex.printStackTrace();
            //System.err.println();
            //Log.err();
        }
    }
}
